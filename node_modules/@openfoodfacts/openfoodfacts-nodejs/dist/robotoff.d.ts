import { paths } from "./schemas/robotoff";
type InsightQuery = paths["/insights"]["get"]["parameters"]["query"];
type InsightResponse = paths["/insights"]["get"]["responses"]["200"]["content"]["application/json"];
type AnnotateBody = paths["/insights/annotate"]["post"]["requestBody"]["content"]["application/x-www-form-urlencoded"];
export type Question = {
    insight_id: string;
    question: string;
    image_url?: string;
    value?: string;
};
type QuestionsResponse = {
    status?: "found" | "no_questions";
    questions?: Question[];
};
export declare class Robotoff {
    /** The fetch function used for every request */
    private readonly fetch;
    /** The raw openapi-fetch client is used for every request exposed by the openapi schema */
    private readonly raw;
    constructor(fetch: typeof global.fetch);
    annotate(body: AnnotateBody): Promise<import("openapi-fetch").FetchResponse<{
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    insight_id: string;
                    annotation: 0 | 1 | -1 | 2;
                    update?: 0 | 1;
                    data?: Record<string, never>;
                };
            };
        };
        responses: {
            200: {
                content: {};
            };
        };
    }, {
        body: {
            insight_id: string;
            annotation: 0 | 1 | -1 | 2;
            update?: 0 | 1;
            data?: Record<string, never>;
        };
        headers: {
            "Content-Type": string;
        };
        bodySerializer: (body: {
            insight_id: string;
            annotation: 0 | 1 | -1 | 2;
            update?: 0 | 1;
            data?: Record<string, never>;
        }) => URLSearchParams;
    }, `${string}/${string}`>>;
    questionsByProductCode(code: number): Promise<QuestionsResponse>;
    insightDetail(id: string): Promise<{} | undefined>;
    /**
     * Fetches insights based on the provided query.
     *
     * @param {InsightQuery} query - The query object containing parameters for fetching insights.
     * @returns {Promise<InsightResponse | undefined>} A promise that resolves to the data from the insights endpoint
     *
     */
    insights(query: InsightQuery): Promise<InsightResponse | undefined>;
    loadLogo(logoId: string): Promise<any>;
}
export {};
