"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NutriPatrol = void 0;
const openapi_fetch_1 = __importDefault(require("openapi-fetch"));
const consts_1 = require("./consts");
class NutriPatrol {
    constructor(fetch) {
        this.baseUrl = "https://nutripatrol.openfoodfacts.org";
        this.fetch = fetch;
        this.raw = (0, openapi_fetch_1.default)({
            baseUrl: this.baseUrl,
            fetch,
            headers: {
                "Content-Type": "application/json",
                "User-Agent": consts_1.USER_AGENT,
            },
        });
    }
    fetchApi(method_1, path_1) {
        return __awaiter(this, arguments, void 0, function* (method, path, options = {}) {
            var _a, _b;
            const methods = {
                GET: this.raw.GET,
                POST: this.raw.POST,
                PUT: this.raw.PUT,
                DELETE: this.raw.DELETE,
            };
            try {
                const fct = methods[method];
                const res = yield fct(path, options);
                let errorDetails;
                if (!res.response.ok) {
                    switch (res.response.status) {
                        case 422:
                            return {
                                error: {
                                    statusCode: 422,
                                    message: "Validation error",
                                    details: (_b = (_a = res.error) === null || _a === void 0 ? void 0 : _a.detail) === null || _b === void 0 ? void 0 : _b.map((d) => d.msg),
                                },
                            };
                        default:
                            errorDetails = yield res.response.json();
                            return {
                                error: {
                                    statusCode: res.response.status,
                                    message: "Error while requesting Nutripatrol API",
                                    details: errorDetails,
                                },
                            };
                    }
                }
                const data = yield res.response.json();
                if (!data) {
                    return {
                        error: {
                            statusCode: 500,
                            message: "Malformed API response",
                        },
                    };
                }
                return data;
            }
            catch (_c) {
                return {
                    error: {
                        statusCode: 500,
                        message: "An unexpected error occurred",
                    },
                };
            }
        });
    }
    /**
     * List all flags.
     *
     * @returns {Promise<Flag[] | NutriPatrolError>} - A promise that resolves with the list of flag data or error.
     *
     * The error can be one of the following:
     * - A `NutriPatrolError` with status 422 if there is a validation issue (e.g., invalid flag ID).
     * - A `NutriPatrolError` with the corresponding HTTP status code for other types of errors (e.g., 404, 500).
     * - A generic `NutriPatrolError` with status 500 for unexpected errors.
     *
     */
    getFlags() {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.fetchApi("GET", `/api/v1/flags`);
            if ("error" in data) {
                return data;
            }
            return data.flags;
        });
    }
    /**
     * Retrieves a specific flag by its ID from the NutriPatrol API.
     *
     * @param {number} flagId - The ID of the flag to fetch.
     * @returns {Promise<Flag | NutriPatrolError>} - A promise that resolves with the flag data if found or error.
     *
     * The error can be one of the following:
     * - A `NutriPatrolError` with status 422 if there is a validation issue (e.g., invalid flag ID).
     * - A `NutriPatrolError` with the corresponding HTTP status code for other types of errors (e.g., 404, 500).
     * - A generic `NutriPatrolError` with status 500 for unexpected errors.
     *
     */
    getFlagById(flagId) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.fetchApi("GET", `/api/v1/flags/{flag_id}`, {
                params: { path: { flag_id: flagId } },
            });
            if ("error" in data) {
                return data;
            }
            return data.__data__;
        });
    }
    /**
     * Create a flag in the NutriPatrol API.
     *
     * @param {Flag} flagData - Data for the flag to create.
     * @returns {Promise<Flag | NutriPatrolError>} - A promise that resolves with the flag created or error..
     *
     * The error can be one of the following:
     * - A `NutriPatrolError` with status 422 if there is a validation issue (e.g., invalid flag ID).
     * - A `NutriPatrolError` with the corresponding HTTP status code for other types of errors (e.g., 404, 500).
     * - A generic `NutriPatrolError` with status 500 for unexpected errors.
     *
     */
    createFlag(flagData) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.fetchApi("POST", `/api/v1/flags`, {
                body: flagData,
            });
            if ("error" in data) {
                return data;
            }
            return data;
        });
    }
    /**
     * Get flags by ticket batch.
     *
     * @param {number[]} ticketIds - Ids of ticket to get flags from.
     * @returns {Promise<{ [ticketId: string]: Flag[] } | NutriPatrolError>} - A promise that resolves with the flags associated to each ticket or error.
     *
     * The error can be one of the following:
     * - A `NutriPatrolError` with status 422 if there is a validation issue (e.g., invalid flag ID).
     * - A `NutriPatrolError` with the corresponding HTTP status code for other types of errors (e.g., 404, 500).
     * - A generic `NutriPatrolError` with status 500 for unexpected errors.
     *
     */
    getFlagsByTicketBatch(ticketIds) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.fetchApi("POST", `/api/v1/batch`, {
                body: {
                    ticket_ids: ticketIds,
                },
            });
            if ("error" in data) {
                return data;
            }
            return data.ticket_id_to_flags;
        });
    }
    /**
     * List all tickets.
     *
     * @param {object} query - Parameters to filter the tickets.
     * @returns {Promise<Ticket[] | NutriPatrolError>} - A promise that resolves with the list of ticket data or error.
     *
     * The error can be one of the following:
     * - A `NutriPatrolError` with status 422 if there is a validation issue (e.g., invalid filter value).
     * - A `NutriPatrolError` with the corresponding HTTP status code for other types of errors (e.g., 404, 500).
     * - A generic `NutriPatrolError` with status 500 for unexpected errors.
     *
     */
    getTickets(query) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.fetchApi("GET", `/api/v1/tickets`, { params: { query } });
            if ("error" in data) {
                return data;
            }
            return data.tickets;
        });
    }
    /**
     * Retrieves a specific ticket by its ID from the NutriPatrol API.
     *
     * @param {number} ticketId - The ID of the ticket to fetch.
     * @returns {Promise<Ticket | NutriPatrolError>} - A promise that resolves with the ticket data if found or error.
     *
     * The error can be one of the following:
     * - A `NutriPatrolError` with status 422 if there is a validation issue (e.g., invalid ticket ID).
     * - A `NutriPatrolError` with the corresponding HTTP status code for other types of errors (e.g., 404, 500).
     * - A generic `NutriPatrolError` with status 500 for unexpected errors.
     *
     */
    getTicketById(ticketId) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.fetchApi("GET", `/api/v1/tickets/{ticket_id}`, {
                params: { path: { ticket_id: ticketId } },
            });
            if ("error" in data) {
                return data;
            }
            return data;
        });
    }
    /**
     * Create a ticket in the NutriPatrol API.
     *
     * @param {Ticket} ticketData - Data for the ticket to create.
     * @returns {Promise<Ticket | NutriPatrolError>} - A promise that resolves with the ticket created or error.
     *
     * The error can be one of the following:
     * - A `NutriPatrolError` with status 422 if there is a validation issue (e.g., invalid ticket status).
     * - A `NutriPatrolError` with the corresponding HTTP status code for other types of errors (e.g., 404, 500).
     * - A generic `NutriPatrolError` with status 500 for unexpected errors.
     *
     */
    createTicket(ticketData) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.fetchApi("POST", `/api/v1/tickets`, {
                body: ticketData,
            });
            if ("error" in data) {
                return data;
            }
            return data;
        });
    }
    /**
     * Update a ticket status in the NutriPatrol API.
     *
     * @param {number} ticketId - The ID of the ticket to update.
     * @param {"open" | "closed"} status - The new status of the ticket.
     * @returns {Promise<Ticket | NutriPatrolError>} - A promise that resolves with the ticket updated or error.
     *
     * The error can be one of the following:
     * - A `NutriPatrolError` with status 422 if there is a validation issue (e.g., invalid ticket status).
     * - A `NutriPatrolError` with the corresponding HTTP status code for other types of errors (e.g., 404, 500).
     * - A generic `NutriPatrolError` with status 500 for unexpected errors.
     *
     */
    updateTicketStatus(ticketId, status) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.fetchApi("PUT", `/api/v1/tickets/{ticket_id}/status`, {
                params: {
                    path: { ticket_id: ticketId },
                    query: { status },
                },
            });
            if ("error" in data) {
                return data;
            }
            return data;
        });
    }
    /**
     * Get the status of the NutriPatrol API.
     *
     * @returns {Promise<{ status: string } | NutriPatrolError>} - A promise that resolves with the API status or error.
     *
     * The error can be one of the following:
     * - A `NutriPatrolError` with the corresponding HTTP status code for other types of errors (e.g., 404, 500).
     * - A generic `NutriPatrolError` with status 500 for unexpected errors.
     *
     */
    getApiStatus() {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.fetchApi("GET", `/api/v1/status`);
            if ("error" in data) {
                return data;
            }
            return data;
        });
    }
}
exports.NutriPatrol = NutriPatrol;
