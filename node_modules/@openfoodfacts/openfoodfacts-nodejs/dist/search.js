"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchApi = void 0;
const openapi_fetch_1 = __importDefault(require("openapi-fetch"));
const consts_1 = require("./consts");
const SEARCH_BASE_URL = "https://search.openfoodfacts.org";
class SearchApi {
    constructor(fetch, options = { baseUrl: SEARCH_BASE_URL }) {
        this.client = (0, openapi_fetch_1.default)({
            fetch,
            baseUrl: options.baseUrl,
            credentials: "include",
            headers: {
                "User-Agent": consts_1.USER_AGENT,
            },
        });
    }
    getDocument(identifier, query) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.GET("/document/{identifier}", {
                params: { path: { identifier }, query },
            });
        });
    }
    search(body) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.POST("/search", { body });
        });
    }
    searchGet(query) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.GET("/search", { params: { query } });
        });
    }
    autocomplete(query) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.GET("/autocomplete", { params: { query } });
        });
    }
    getOffDemo() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.GET("/", {});
        });
    }
    htmlSearch(query) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.GET("/off-test", { params: { query } });
        });
    }
    getRobotsTxt() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.GET("/robots.txt", {});
        });
    }
    healthCheck() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.GET("/health", {});
        });
    }
}
exports.SearchApi = SearchApi;
