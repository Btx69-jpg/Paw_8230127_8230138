import type { paths } from "$schemas/search";
type DocumentQuery = paths["/document/{identifier}"]["get"]["parameters"]["query"];
type SearchQuery = paths["/search"]["get"]["parameters"]["query"];
type SearchBody = paths["/search"]["post"]["requestBody"]["content"]["application/json"];
type AutocompleteQuery = paths["/autocomplete"]["get"]["parameters"]["query"];
type HtmlSearchQuery = paths["/off-test"]["get"]["parameters"]["query"];
export declare class SearchApi {
    private readonly client;
    constructor(fetch: typeof window.fetch, options?: {
        baseUrl: string;
    });
    getDocument(identifier: string, query?: DocumentQuery): Promise<import("openapi-fetch").FetchResponse<{
        parameters: {
            query?: {
                index_id?: string | null;
            };
            header?: never;
            path: {
                identifier: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("$schemas/search").components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }, {
        params: {
            path: {
                identifier: string;
            };
            query: {
                index_id?: string | null;
            } | undefined;
        };
    }, `${string}/${string}`>>;
    search(body: SearchBody): Promise<import("openapi-fetch").FetchResponse<{
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import("$schemas/search").components["schemas"]["SearchParameters"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("$schemas/search").components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }, {
        body: {
            q?: string | null;
            langs: string[];
            page_size: number;
            page: number;
            fields?: string[] | null;
            sort_by?: string | null;
            facets?: string[] | null;
            charts?: (import("$schemas/search").components["schemas"]["DistributionChartType"] | import("$schemas/search").components["schemas"]["ScatterChartType"])[] | null;
            sort_params?: Record<string, never> | null;
            index_id?: string | null;
        };
    }, `${string}/${string}`>>;
    searchGet(query: SearchQuery): Promise<import("openapi-fetch").FetchResponse<{
        parameters: {
            query?: {
                q?: string | null;
                langs?: string;
                page_size?: number;
                page?: number;
                fields?: string;
                sort_by?: string | null;
                facets?: string;
                charts?: string;
                index_id?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("$schemas/search").components["schemas"]["ErrorSearchResponse"] | import("$schemas/search").components["schemas"]["SuccessSearchResponse"];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("$schemas/search").components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }, {
        params: {
            query: {
                q?: string | null;
                langs?: string;
                page_size?: number;
                page?: number;
                fields?: string;
                sort_by?: string | null;
                facets?: string;
                charts?: string;
                index_id?: string | null;
            } | undefined;
        };
    }, `${string}/${string}`>>;
    autocomplete(query: AutocompleteQuery): Promise<import("openapi-fetch").FetchResponse<{
        parameters: {
            query: {
                q: string;
                taxonomy_names: string;
                lang?: string;
                size?: number;
                fuzziness?: number | null;
                index_id?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("$schemas/search").components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }, {
        params: {
            query: {
                q: string;
                taxonomy_names: string;
                lang?: string;
                size?: number;
                fuzziness?: number | null;
                index_id?: string | null;
            };
        };
    }, `${string}/${string}`>>;
    getOffDemo(): Promise<import("openapi-fetch").FetchResponse<{
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
        };
    }, {}, `${string}/${string}`>>;
    htmlSearch(query?: HtmlSearchQuery): Promise<import("openapi-fetch").FetchResponse<{
        parameters: {
            query?: {
                q?: string | null;
                page?: number;
                page_size?: number;
                langs?: string;
                sort_by?: string | null;
                index_id?: string | null;
                display_debug?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("$schemas/search").components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }, {
        params: {
            query: {
                q?: string | null;
                page?: number;
                page_size?: number;
                langs?: string;
                sort_by?: string | null;
                index_id?: string | null;
                display_debug?: boolean;
            } | undefined;
        };
    }, `${string}/${string}`>>;
    getRobotsTxt(): Promise<import("openapi-fetch").FetchResponse<{
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    }, {}, `${string}/${string}`>>;
    healthCheck(): Promise<import("openapi-fetch").FetchResponse<{
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    }, {}, `${string}/${string}`>>;
}
export {};
