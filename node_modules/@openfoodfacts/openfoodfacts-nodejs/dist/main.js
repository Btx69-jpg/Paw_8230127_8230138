"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenFoodFacts = void 0;
const openapi_fetch_1 = __importDefault(require("openapi-fetch"));
const robotoff_1 = require("./robotoff");
const api_1 = require("./taxonomy/api");
const consts_1 = require("./consts");
__exportStar(require("./taxonomy/types"), exports);
__exportStar(require("./robotoff"), exports);
__exportStar(require("./folksonomy"), exports);
__exportStar(require("./prices"), exports);
__exportStar(require("./nutripatrol"), exports);
/** Wrapper of OFF API */
class OpenFoodFacts {
    /**
     * Create OFF object
     * @param options - Options for the OFF Object
     */
    constructor(fetch, options = { country: "world" }) {
        this.baseUrl = `https://${options.country}.openfoodfacts.org`;
        this.fetch = fetch;
        this.rawv2 = (0, openapi_fetch_1.default)({
            fetch: this.fetch,
            baseUrl: this.baseUrl,
            headers: {
                "User-Agent": consts_1.USER_AGENT,
            },
        });
        this.robotoff = new robotoff_1.Robotoff(fetch);
    }
    getTaxoEntry(taxo, entry) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield fetch(`${this.baseUrl}/api/v2/taxonomy?tagtype=${taxo}&tags=${entry}`, { headers: { "User-Agent": consts_1.USER_AGENT } });
            return (yield res.json());
        });
    }
    getBrand(brandName) {
        return this.getTaxoEntry("brands", brandName);
    }
    getLanguage(languageName) {
        return this.getTaxoEntry("languages", languageName);
    }
    getBrands() {
        return this.getTaxo("brands");
    }
    getLanguages() {
        return this.getTaxo("languages");
    }
    getLabels() {
        return this.getTaxo("labels");
    }
    getAdditives() {
        return this.getTaxo("additives");
    }
    getAllergens() {
        return this.getTaxo("allergens");
    }
    getCategories() {
        return this.getTaxo("categories");
    }
    getCountries() {
        return this.getTaxo("countries");
    }
    getIngredients() {
        return this.getTaxo("ingredients");
    }
    getPackagings() {
        return this.getTaxo("packaging");
    }
    getStates() {
        return this.getTaxo("states");
    }
    getStores() {
        return this.getTaxo("stores");
    }
    getTaxo(taxo) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.fetch((0, api_1.TAXONOMY_URL)(taxo));
            return (yield res.json());
        });
    }
    /**
     * It is used to get a specific product using barcode
     * @param barcode Barcode of the product you want to fetch details
     */
    getProduct(barcode) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const res = yield this.rawv2.GET("/api/v2/product/{barcode}", {
                params: { path: { barcode } },
            });
            return (_a = res.data) === null || _a === void 0 ? void 0 : _a.product;
        });
    }
    performOCR(barcode_1, photoId_1) {
        return __awaiter(this, arguments, void 0, function* (barcode, photoId, ocrEngine = "google_cloud_vision") {
            const res = yield this.rawv2.GET("/cgi/ingredients.pl", {
                params: {
                    query: {
                        code: barcode,
                        id: photoId,
                        ocr_engine: ocrEngine,
                        process_image: "1",
                    },
                },
            });
            return res.data;
        });
    }
    getProductImages(barcode) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d, _e;
            const res = yield this.rawv2.GET("/api/v2/product/{barcode}", {
                params: {
                    query: {
                        fields: "images",
                    },
                    path: { barcode },
                },
            });
            if (!((_a = res.data) === null || _a === void 0 ? void 0 : _a.product)) {
                return null;
            }
            else if (!((_c = (_b = res.data) === null || _b === void 0 ? void 0 : _b.product) === null || _c === void 0 ? void 0 : _c.images)) {
                return null;
            }
            const imgObj = (_e = (_d = res.data) === null || _d === void 0 ? void 0 : _d.product) === null || _e === void 0 ? void 0 : _e.images;
            return Object.keys(imgObj);
        });
    }
    search(fields, sortBy) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.rawv2.GET("/api/v2/search", {
                params: { query: { fields, sort_by: sortBy } },
            });
            return res.data;
        });
    }
}
exports.OpenFoodFacts = OpenFoodFacts;
exports.default = OpenFoodFacts;
