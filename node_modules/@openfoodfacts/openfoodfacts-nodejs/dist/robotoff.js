"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Robotoff = void 0;
const openapi_fetch_1 = __importDefault(require("openapi-fetch"));
const consts_1 = require("./consts");
const formbody_1 = require("./formbody");
class Robotoff {
    constructor(fetch) {
        this.fetch = fetch;
        this.raw = (0, openapi_fetch_1.default)({
            fetch: this.fetch,
            baseUrl: "https://robotoff.openfoodfacts.org/api/v1",
            headers: {
                "User-Agent": consts_1.USER_AGENT,
            },
        });
    }
    annotate(body) {
        return __awaiter(this, void 0, void 0, function* () {
            const stringifyValues = (body) => {
                return Object.fromEntries(Object.entries(body).map(([key, value]) => [key, String(value)]));
            };
            return this.raw.POST("/insights/annotate", {
                body: body,
                headers: { "Content-Type": "application/x-www-form-urlencoded" },
                bodySerializer: (body) => (0, formbody_1.formBody)(stringifyValues(body)),
            });
        });
    }
    questionsByProductCode(code) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.raw.GET("/questions/{barcode}", {
                params: {
                    path: { barcode: code },
                },
            });
            return result.data;
        });
    }
    insightDetail(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.raw.GET("/insights/detail/{id}", {
                params: { path: { id } },
            });
            return result.data;
        });
    }
    /**
     * Fetches insights based on the provided query.
     *
     * @param {InsightQuery} query - The query object containing parameters for fetching insights.
     * @returns {Promise<InsightResponse | undefined>} A promise that resolves to the data from the insights endpoint
     *
     */
    insights(query) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.raw.GET("/insights", { params: { query } });
            return result.data;
        });
    }
    // TODO: replace any with proper type
    // ATM not specifying the type makes tsc fail sometimes
    loadLogo(logoId) {
        return __awaiter(this, void 0, void 0, function* () {
            // @ts-expect-error TODO: still not documented
            const result = yield this.raw.GET("/images/logos/{logoId}", {
                params: { path: { logoId } },
            });
            return result.data;
        });
    }
}
exports.Robotoff = Robotoff;
