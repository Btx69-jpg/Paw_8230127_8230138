import createClient from "openapi-fetch";
import { paths as pathsv2, components as componentsv2, external as externalv2 } from "$schemas/server/v2";
import { Robotoff } from "./robotoff";
import { Additive, Allergen, Brand, Category, Country, Ingredient, Label, Language, State, Store, TaxoNode, Taxonomy } from "./taxonomy/types";
export type ProductV2 = componentsv2["schemas"]["Product"];
export type SearchResultV2 = externalv2["responses/search_for_products.yaml"];
export { ProductV2 as Product, SearchResultV2 as SearchResult };
export * from "./taxonomy/types";
export * from "./robotoff";
export * from "./folksonomy";
export * from "./prices";
export * from "./nutripatrol";
export type OpenFoodFactsOptions = {
    country: string;
};
/** Wrapper of OFF API */
export declare class OpenFoodFacts {
    private readonly fetch;
    private readonly baseUrl;
    /** Raw v2 client */
    readonly rawv2: ReturnType<typeof createClient<pathsv2>>;
    /** Robotoff API */
    readonly robotoff: Robotoff;
    /**
     * Create OFF object
     * @param options - Options for the OFF Object
     */
    constructor(fetch: typeof global.fetch, options?: OpenFoodFactsOptions);
    private getTaxoEntry;
    getBrand(brandName: string): Promise<Brand>;
    getLanguage(languageName: string): Promise<Language>;
    getBrands(): Promise<Taxonomy<Brand>>;
    getLanguages(): Promise<Taxonomy<Language>>;
    getLabels(): Promise<Taxonomy<Label>>;
    getAdditives(): Promise<Taxonomy<Additive>>;
    getAllergens(): Promise<Taxonomy<Allergen>>;
    getCategories(): Promise<Taxonomy<Category>>;
    getCountries(): Promise<Taxonomy<Country>>;
    getIngredients(): Promise<Taxonomy<Ingredient>>;
    getPackagings(): Promise<Taxonomy<Ingredient>>;
    getStates(): Promise<Taxonomy<State>>;
    getStores(): Promise<Taxonomy<Store>>;
    getTaxo<T extends TaxoNode>(taxo: string): Promise<Taxonomy<T>>;
    /**
     * It is used to get a specific product using barcode
     * @param barcode Barcode of the product you want to fetch details
     */
    getProduct(barcode: string): Promise<ProductV2 | undefined>;
    performOCR(barcode: string, photoId: string, ocrEngine?: "google_cloud_vision"): Promise<{
        status?: number;
    } | undefined>;
    getProductImages(barcode: string): Promise<string[] | null>;
    search(fields?: string, sortBy?: componentsv2["parameters"]["sort_by"]): Promise<SearchResultV2 | undefined>;
}
export default OpenFoodFacts;
