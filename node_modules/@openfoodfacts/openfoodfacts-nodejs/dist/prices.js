"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PricesApi = void 0;
const openapi_fetch_1 = __importDefault(require("openapi-fetch"));
const consts_1 = require("./consts");
const BASE_URL = "https://prices.openfoodfacts.org";
class PricesApi {
    constructor(fetch, options = { baseUrl: BASE_URL }) {
        this.client = (0, openapi_fetch_1.default)({
            fetch,
            baseUrl: options.baseUrl,
            credentials: "include",
            headers: {
                "User-Agent": consts_1.USER_AGENT,
            },
        });
    }
    getPrices(query) {
        return this.client.GET("/api/v1/prices", { params: { query } });
    }
    createPrice(body) {
        return this.client.POST("/api/v1/prices", { body });
    }
    login(body) {
        return this.client.POST("/api/v1/auth", {
            // @ts-expect-error - The type definition currently specify set_cookie as a boolean which is incorrect.
            // until that is fixed, we need to use this workaround.
            params: { query: { set_cookie: 1 } },
            body,
            headers: { "Content-Type": "application/x-www-form-urlencoded" },
            bodySerializer: (body) => new URLSearchParams(body),
        });
    }
    uploadProof(body) {
        return this.client.POST("/api/v1/proofs/upload", {
            // @ts-expect-error - FormData is not supported by openapi-fetch
            body: body,
            headers: { "Content-Type": "multipart/form-data" },
        });
    }
    getProofs() {
        return this.client.GET("/api/v1/proofs");
    }
    isAuthenticated() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.client.GET("/api/v1/session");
            return res.response.ok;
        });
    }
    getStatus() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.client.GET("/api/v1/status");
            return res.data;
        });
    }
}
exports.PricesApi = PricesApi;
